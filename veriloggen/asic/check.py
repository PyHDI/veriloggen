import json


valid_vars = [
    'DESIGN_NAME',
    'VERILOG_FILES',
    'CLOCK_PERIOD',
    'CLOCK_NET',
    'CLOCK_PORT',
    'PDK',
    'STD_CELL_LIBRARY',
    'STD_CELL_LIBRARY_OPT',
    'PDK_ROOT',
    'DIODE_PADDING',
    'MERGED_LEF',
    'NO_SYNTH_CELL_LIST',
    'DRC_EXCLUDE_CELL_LIST',
    'VERILOG_FILES_BLACKBOX',
    'EXTRA_LEFS',
    'EXTRA_LIBS',
    'EXTRA_GDS_FILES',
    'SYNTH_AUTONAME',
    'SYNTH_BIN',
    'SYNTH_CAP_LOAD',
    'SYNTH_MAX_FANOUT',
    'SYNTH_MAX_TRAN',
    'SYNTH_CLOCK_UNCERTAINTY',
    'SYNTH_CLOCK_TRANSITION',
    'SYNTH_TIMING_DERATE',
    'SYNTH_STRATEGY',
    'SYNTH_BUFFERING',
    'SYNTH_SIZING',
    'SYNTH_READ_BLACKBOX_LIB',
    'SYNTH_NO_FLAT',
    'SYNTH_SHARE_RESOURCES',
    'SYNTH_ADDER_TYPE',
    'SYNTH_EXTRA_MAPPING_FILE',
    'SYNTH_PARAMETERS',
    'SYNTH_ELABORATE_ONLY',
    'CLOCK_BUFFER_FANOUT',
    'BASE_SDC_FILE',
    'VERILOG_INCLUDE_DIRS',
    'SYNTH_FLAT_TOP',
    'IO_PCT',
    'STA_WRITE_LIB',
    'FP_CORE_UTIL',
    'FP_ASPECT_RATIO',
    'FP_SIZING',
    'DIE_AREA',
    'CORE_AREA',
    'FP_IO_MODE',
    'FP_WELLTAP_CELL',
    'FP_ENDCAP_CELL',
    'FP_PDN_VOFFSET',
    'FP_PDN_VPITCH',
    'FP_PDN_HOFFSET',
    'FP_PDN_HPITCH',
    'FP_PDN_AUTO_ADJUST',
    'FP_PDN_SKIPTRIM',
    'FP_TAPCELL_DIST',
    'FP_IO_VEXTEND',
    'FP_IO_HEXTEND',
    'FP_IO_VLENGTH',
    'FP_IO_HLENGTH',
    'FP_IO_VTHICKNESS_MULT',
    'FP_IO_HTHICKNESS_MULT',
    'FP_IO_UNMATCHED_ERROR',
    'BOTTOM_MARGIN_MULT',
    'TOP_MARGIN_MULT',
    'LEFT_MARGIN_MULT',
    'RIGHT_MARGIN_MULT',
    'FP_PDN_CORE_RING',
    'FP_PDN_ENABLE_RAILS',
    'FP_PDN_ENABLE_MACROS_GRID',
    'FP_PDN_MACRO_HOOKS',
    'FP_PDN_CHECK_NODES',
    'FP_TAP_HORIZONTAL_HALO',
    'FP_TAP_VERTICAL_HALO',
    'FP_PDN_HORIZONTAL_HALO',
    'FP_PDN_VERTICAL_HALO',
    'DESIGN_IS_CORE',
    'FP_PIN_ORDER_CFG',
    'FP_CONTEXT_DEF',
    'FP_CONTEXT_LEF',
    'FP_DEF_TEMPLATE',
    'VDD_NETS',
    'GND_NETS',
    'SYNTH_USE_PG_PINS_DEFINES',
    'FP_IO_MIN_DISTANCE',
    'FP_PADFRAME_CFG',
    'FP_PDN_IRDROP',
    'FP_IO_HMETAL',
    'FP_IO_VMETAL',
    'RSZ_LIB',
    'RSZ_DONT_TOUCH_RX',
    'LIB_RESIZER_OPT',
    'PL_TARGET_DENSITY',
    'PL_TIME_DRIVEN',
    'PL_BASIC_PLACEMENT',
    'PL_SKIP_INITIAL_PLACEMENT',
    'PL_RANDOM_GLB_PLACEMENT',
    'PL_RANDOM_INITIAL_PLACEMENT',
    'PL_ROUTABILITY_DRIVEN',
    'PL_RESIZER_DESIGN_OPTIMIZATIONS',
    'PL_RESIZER_TIMING_OPTIMIZATIONS',
    'PL_RESIZER_MAX_WIRE_LENGTH',
    'PL_RESIZER_MAX_SLEW_MARGIN',
    'PL_RESIZER_MAX_CAP_MARGIN',
    'PL_RESIZER_HOLD_SLACK_MARGIN',
    'PL_RESIZER_SETUP_SLACK_MARGIN',
    'PL_RESIZER_HOLD_MAX_BUFFER_PERCENT',
    'PL_RESIZER_SETUP_MAX_BUFFER_PERCENT',
    'PL_RESIZER_ALLOW_SETUP_VIOS',
    'DONT_USE_CELLS',
    'PL_ESTIMATE_PARASITICS',
    'PL_OPTIMIZE_MIRRORING',
    'PL_RESIZER_BUFFER_INPUT_PORTS',
    'PL_RESIZER_BUFFER_OUTPUT_PORTS',
    'PL_RESIZER_REPAIR_TIE_FANOUT',
    'PL_MAX_DISPLACEMENT_X',
    'PL_MAX_DISPLACEMENT_Y',
    'PL_MACRO_HALO',
    'PL_MACRO_CHANNEL',
    'MACRO_PLACEMENT_CFG',
    'UNBUFFER_NETS',
    'DONT_BUFFER_PORTS',
    'CTS_TARGET_SKEW',
    'CLOCK_TREE_SYNTH',
    'CTS_TOLERANCE',
    'CTS_SINK_CLUSTERING_SIZE',
    'CTS_SINK_CLUSTERING_MAX_DIAMETER',
    'CTS_REPORT_TIMING',
    'CTS_CLK_MAX_WIRE_LENGTH',
    'CTS_DISABLE_POST_PROCESSING',
    'CTS_DISTANCE_BETWEEN_BUFFERS',
    'LIB_CTS',
    'FILL_INSERTION',
    'RUN_SIMPLE_CTS',
    'GLOBAL_ROUTER',
    'DETAILED_ROUTER',
    'ROUTING_CORES',
    'RT_CLOCK_MIN_LAYER',
    'RT_CLOCK_MAX_LAYER',
    'GLB_RESIZER_TIMING_OPTIMIZATIONS',
    'GLB_RESIZER_MAX_WIRE_LENGTH',
    'GLB_RESIZER_MAX_SLEW_MARGIN',
    'GLB_RESIZER_MAX_CAP_MARGIN',
    'GLB_RESIZER_HOLD_SLACK_MARGIN',
    'GLB_RESIZER_SETUP_SLACK_MARGIN',
    'GLB_RESIZER_HOLD_MAX_BUFFER_PERCENT',
    'GLB_RESIZER_SETUP_MAX_BUFFER_PERCENT',
    'GLB_RESIZER_ALLOW_SETUP_VIOS',
    'GLB_OPTIMIZE_MIRRORING',
    'GRT_ALLOW_CONGESTION',
    'GRT_OVERFLOW_ITERS',
    'GRT_ANT_ITERS',
    'GRT_ESTIMATE_PARASITICS',
    'GRT_MAX_DIODE_INS_ITERS',
    'GRT_OBS',
    'GRT_ADJUSTMENT',
    'GRT_MACRO_EXTENSION',
    'DRT_MIN_LAYER',
    'DRT_MAX_LAYER',
    'DRT_OPT_ITERS',
    'ROUTING_OPT_ITERS',
    'GLB_RT_MINLAYER',
    'GLB_RT_MAXLAYER',
    'GLB_RT_CLOCK_MINLAYER',
    'GLB_RT_CLOCK_MAXLAYER',
    'GLB_RT_UNIDIRECTIONAL',
    'GLB_RT_TILES',
    'SPEF_EXTRACTOR',
    'RCX_MERGE_VIA_WIRE_RES',
    'RCX_SDC_FILE',
    'SPEF_WIRE_MODEL',
    'SPEF_EDGE_CAP_FACTOR',
    'MAGIC_PAD',
    'MAGIC_ZEROIZE_ORIGIN',
    'MAGIC_GENERATE_GDS',
    'MAGIC_GENERATE_LEF',
    'MAGIC_GENERATE_MAGLEF',
    'MAGIC_WRITE_FULL_LEF',
    'MAGIC_DRC_USE_GDS',
    'MAGIC_EXT_USE_GDS',
    'MAGIC_INCLUDE_GDS_POINTERS',
    'MAGIC_DISABLE_HIER_GDS',
    'MAGIC_DEF_NO_BLOCKAGES',
    'MAGIC_DEF_LABELS',
    'MAGIC_GDS_ALLOW_ABSTRACT',
    'MAGIC_GDS_POLYGON_SUBCELLS',
    'LVS_INSERT_POWER_PINS',
    'LVS_CONNECT_BY_LABEL',
    'YOSYS_REWRITE_VERILOG',
    'RUN_DRT',
    'RUN_LVS',
    'RUN_MAGIC',
    'RUN_MAGIC_DRC',
    'RUN_KLAYOUT',
    'RUN_KLAYOUT_DRC',
    'RUN_KLAYOUT_XOR',
    'RUN_SPEF_EXTRACTION',
    'RUN_CVC',
    'RUN_IRDROP_REPORT',
    'RUN_TAP_DECAP_INSERTION',
    'RUN_FILL_INSERTION',
    'KLAYOUT_DRC_KLAYOUT_GDS',
    'GENERATE_FINAL_SUMMARY_REPORT',
    'LEC_ENABLE',
    'USE_GPIO_PADS',
    'PRIMARY_SIGNOFF_TOOL',
    'KLAYOUT_XOR_GDS',
    'KLAYOUT_XOR_XML',
    'TAKE_LAYOUT_SCROT',
    'KLAYOUT_XOR_THREADS',
    'DIODE_INSERTION_STRATEGY',
    'USE_ARC_ANTENNA_CHECK',
    'TAP_DECAP_INSERTION',
    'MAGIC_CONVERT_DRC_TO_RDB',
    'TEST_MISMATCHES',
    'QUIT_ON_MISMATCHES',
    'KLAYOUT_XOR_GDS',
    'KLAYOUT_XOR_XML',
    'CHECK_UNMAPPED_CELLS',
    'CHECK_ASSIGN_STATEMENTS',
    'QUIT_ON_TR_DRC',
    'QUIT_ON_LONG_WIRE',
    'QUIT_ON_MAGIC_DRC',
    'QUIT_ON_ILLEGAL_OVERLAPS',
    'QUIT_ON_LVS_ERROR',
]


def check(key, value):
    if not isinstance(key, str):
        raise TypeError('key must be a string')
    if key.startswith(('pdk::', 'scl::')):
        if not isinstance(value, dict):
            raise TypeError('value must be a dictionary in conditional execution')
        for k, v in value.items():
            check(k, v)
    elif key not in valid_vars:
        raise ValueError('invalid variable name:', key)


if __name__ == '__main__':
    with open('config.json') as f:
        cfg = json.load(f)
        if not isinstance(cfg, dict):
            raise TypeError('configuration must be a dictionary')
        for k, v in cfg.items():
            check(k, v)
    print('OK')
